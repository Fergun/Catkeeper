{"ast":null,"code":"import { combineReducers } from \"redux\";\n\nvar typedHouseReducer = function typedHouseReducer() {\n  var typedHouse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type !== \"TYPE_OF_HOUSE\") {\n    return typedHouse;\n  }\n\n  switch (action.payload) {\n    case \"small\":\n      return typedHouse = 5;\n\n    case \"middle\":\n      return typedHouse = 7;\n\n    case \"big\":\n      return typedHouse = 9;\n  }\n};\n\nvar gameReducer = function gameReducer() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [{\n    player: \"Player 1\",\n    score: 0,\n    pathLength: 7,\n    circleAmount: 0,\n    pawAmount: 0,\n    active: 1\n  }, {\n    player: \"Player 2\",\n    score: 0,\n    pathLength: 7,\n    circleAmount: 0,\n    pawAmount: 0,\n    active: 0\n  }];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"NEW_GAME\":\n      return initialState.map(function (el) {\n        el.score = 0;\n        el.pathLength = action.payload;\n        el.circleAmount = 0;\n        el.pawAmount = 0;\n        return el;\n      });\n\n    case \"BTN_PLAY\":\n      return initialState.map(function (cur) {\n        if (cur.active === 1) {\n          cur.score = action.payload.score;\n          cur.circleAmount = action.payload.circle;\n          cur.pawAmount = action.payload.paw;\n          cur.active = 0;\n          return cur;\n        } else {\n          cur.active = 1;\n          return cur;\n        }\n      });\n\n    default:\n      return initialState;\n  }\n};\n\nexport default combineReducers({\n  typedHouse: typedHouseReducer,\n  game: gameReducer\n});","map":{"version":3,"sources":["D:\\PROGRAMOWANIE\\CATKEEPER GAME\\catkeeper\\src\\reducers\\index.js"],"names":["combineReducers","typedHouseReducer","typedHouse","action","type","payload","gameReducer","initialState","player","score","pathLength","circleAmount","pawAmount","active","map","el","cur","circle","paw","game"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAA4B;AAAA,MAA3BC,UAA2B,uEAAd,CAAc;AAAA,MAAXC,MAAW;;AACpD,MAAIA,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACnC,WAAOF,UAAP;AACD;;AAED,UAAQC,MAAM,CAACE,OAAf;AACE,SAAK,OAAL;AACE,aAAQH,UAAU,GAAG,CAArB;;AACF,SAAK,QAAL;AACE,aAAQA,UAAU,GAAG,CAArB;;AACF,SAAK,KAAL;AACE,aAAQA,UAAU,GAAG,CAArB;AANJ;AAQD,CAbD;;AAeA,IAAMI,WAAW,GAAG,SAAdA,WAAc,GAoBf;AAAA,MAnBHC,YAmBG,uEAnBY,CACb;AACEC,IAAAA,MAAM,EAAE,UADV;AAEEC,IAAAA,KAAK,EAAE,CAFT;AAGEC,IAAAA,UAAU,EAAE,CAHd;AAIEC,IAAAA,YAAY,EAAE,CAJhB;AAKEC,IAAAA,SAAS,EAAE,CALb;AAMEC,IAAAA,MAAM,EAAE;AANV,GADa,EASb;AACEL,IAAAA,MAAM,EAAE,UADV;AAEEC,IAAAA,KAAK,EAAE,CAFT;AAGEC,IAAAA,UAAU,EAAE,CAHd;AAIEC,IAAAA,YAAY,EAAE,CAJhB;AAKEC,IAAAA,SAAS,EAAE,CALb;AAMEC,IAAAA,MAAM,EAAE;AANV,GATa,CAmBZ;AAAA,MADHV,MACG;;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAOG,YAAY,CAACO,GAAb,CAAiB,UAAAC,EAAE,EAAI;AAC5BA,QAAAA,EAAE,CAACN,KAAH,GAAW,CAAX;AACAM,QAAAA,EAAE,CAACL,UAAH,GAAgBP,MAAM,CAACE,OAAvB;AACAU,QAAAA,EAAE,CAACJ,YAAH,GAAkB,CAAlB;AACAI,QAAAA,EAAE,CAACH,SAAH,GAAe,CAAf;AACA,eAAOG,EAAP;AACD,OANM,CAAP;;AAOF,SAAK,UAAL;AACE,aAAOR,YAAY,CAACO,GAAb,CAAiB,UAAAE,GAAG,EAAI;AAC7B,YAAIA,GAAG,CAACH,MAAJ,KAAe,CAAnB,EAAsB;AACpBG,UAAAA,GAAG,CAACP,KAAJ,GAAYN,MAAM,CAACE,OAAP,CAAeI,KAA3B;AACAO,UAAAA,GAAG,CAACL,YAAJ,GAAmBR,MAAM,CAACE,OAAP,CAAeY,MAAlC;AACAD,UAAAA,GAAG,CAACJ,SAAJ,GAAgBT,MAAM,CAACE,OAAP,CAAea,GAA/B;AACAF,UAAAA,GAAG,CAACH,MAAJ,GAAa,CAAb;AACA,iBAAOG,GAAP;AACD,SAND,MAMO;AACLA,UAAAA,GAAG,CAACH,MAAJ,GAAa,CAAb;AACA,iBAAOG,GAAP;AACD;AACF,OAXM,CAAP;;AAaF;AACE,aAAOT,YAAP;AAxBJ;AA0BD,CA/CD;;AAiDA,eAAeP,eAAe,CAAC;AAC7BE,EAAAA,UAAU,EAAED,iBADiB;AAE7BkB,EAAAA,IAAI,EAAEb;AAFuB,CAAD,CAA9B","sourcesContent":["import { combineReducers } from \"redux\";\r\n\r\nconst typedHouseReducer = (typedHouse = 7, action) => {\r\n  if (action.type !== \"TYPE_OF_HOUSE\") {\r\n    return typedHouse;\r\n  }\r\n\r\n  switch (action.payload) {\r\n    case \"small\":\r\n      return (typedHouse = 5);\r\n    case \"middle\":\r\n      return (typedHouse = 7);\r\n    case \"big\":\r\n      return (typedHouse = 9);\r\n  }\r\n};\r\n\r\nconst gameReducer = (\r\n  initialState = [\r\n    {\r\n      player: \"Player 1\",\r\n      score: 0,\r\n      pathLength: 7,\r\n      circleAmount: 0,\r\n      pawAmount: 0,\r\n      active: 1\r\n    },\r\n    {\r\n      player: \"Player 2\",\r\n      score: 0,\r\n      pathLength: 7,\r\n      circleAmount: 0,\r\n      pawAmount: 0,\r\n      active: 0\r\n    }\r\n  ],\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"NEW_GAME\":\r\n      return initialState.map(el => {\r\n        el.score = 0;\r\n        el.pathLength = action.payload;\r\n        el.circleAmount = 0;\r\n        el.pawAmount = 0;\r\n        return el;\r\n      });\r\n    case \"BTN_PLAY\":\r\n      return initialState.map(cur => {\r\n        if (cur.active === 1) {\r\n          cur.score = action.payload.score;\r\n          cur.circleAmount = action.payload.circle;\r\n          cur.pawAmount = action.payload.paw;\r\n          cur.active = 0;\r\n          return cur;\r\n        } else {\r\n          cur.active = 1;\r\n          return cur;\r\n        }\r\n      });\r\n\r\n    default:\r\n      return initialState;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  typedHouse: typedHouseReducer,\r\n  game: gameReducer\r\n});\r\n"]},"metadata":{},"sourceType":"module"}